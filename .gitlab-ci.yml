# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
image: python:latest
stages:
- lint
- test
- build
cache:
  paths:
  - ".cache/pip"
  - venv/
bandit-job:
  before_script:
  - python -V
  - pip install virtualenv
  - virtualenv venv
  - source venv/bin/activate
  - pip install pip-tools
  - pip-sync requirements.txt dev-requirements.txt
  - pip install -e .
  stage: lint
  script: bandit --recursive src
pylint-job:
  before_script:
  - python -V
  - pip install virtualenv
  - virtualenv venv
  - source venv/bin/activate
  - pip install pip-tools
  - pip-sync requirements.txt dev-requirements.txt
  - pip install -e .
  stage: lint
  script: pylint src/
pytest-job:
  before_script:
  - python -V
  - pip install virtualenv
  - virtualenv venv
  - source venv/bin/activate
  - pip install pip-tools
  - pip-sync requirements.txt dev-requirements.txt
  - pip install -e .
  - export KDF_ITERATIONS=100 # Keep this low to make tests faster
  stage: test
  coverage: "/^TOTAL.+?(\\d+\\%)$/"
  script:
  - coverage run
  - coverage report
  - coverage xml
  artifacts:
    reports:
      cobertura: coverage.xml
sast:
  stage: test
  variables:
    SAST_EXCLUDED_PATHS: spec, test, tests, tmp, venv
    SAST_BANDIT_EXCLUDED_PATHS: "*/tests/*,*/venv/*"

docker-build:
  image: docker:latest
  stage: build
  services:
  - docker:dind
  before_script:
  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
  - |
    if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
      tag=""
      echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
    else
      tag=":$CI_COMMIT_REF_SLUG"
      echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
    fi
  - docker build --pull -t "$CI_REGISTRY_IMAGE${tag}" .
  - docker push "$CI_REGISTRY_IMAGE${tag}"

pypi-build:
  image: python:latest
  stage: build
  script:
  - pip install --upgrade twine build
  - python -m build
  - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine
    upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi
    dist/*
  only:
    refs:
    - tags

include:
- template: Security/Secret-Detection.gitlab-ci.yml
- template: Security/SAST.gitlab-ci.yml
